[{"/home/format/Grievance-and-Member-Interactions-Tracker/src/index.js":"1","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/App.js":"2","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/HomePage.js":"3","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/NavigationLogoContainer.js":"4","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/LogOnForm.js":"5","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/GrievanceListContainer.js":"6","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/GrievanceFormContainer.js":"7","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/GrievanceTableContainer.js":"8","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/SignUpOverlay.js":"9","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/NavigationIcons.js":"10","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/MemberInteractionForm.js":"11","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/GrievanceForm.js":"12","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/Pagination.js":"13","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/NavigationSearchBar.js":"14","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/AddSubTask.js":"15"},{"size":280,"mtime":1620238261819,"results":"16","hashOfConfig":"17"},{"size":2741,"mtime":1621968535224,"results":"18","hashOfConfig":"17"},{"size":4576,"mtime":1621968245794,"results":"19","hashOfConfig":"17"},{"size":524,"mtime":1620238261819,"results":"20","hashOfConfig":"17"},{"size":5979,"mtime":1620238261819,"results":"21","hashOfConfig":"17"},{"size":4467,"mtime":1620238261819,"results":"22","hashOfConfig":"17"},{"size":665,"mtime":1620238261819,"results":"23","hashOfConfig":"17"},{"size":7651,"mtime":1621967140030,"results":"24","hashOfConfig":"17"},{"size":5254,"mtime":1620238261819,"results":"25","hashOfConfig":"17"},{"size":2229,"mtime":1620238261819,"results":"26","hashOfConfig":"17"},{"size":4430,"mtime":1620238261819,"results":"27","hashOfConfig":"17"},{"size":4607,"mtime":1620238261819,"results":"28","hashOfConfig":"17"},{"size":747,"mtime":1621967140030,"results":"29","hashOfConfig":"17"},{"size":540,"mtime":1620238261819,"results":"30","hashOfConfig":"17"},{"size":1834,"mtime":1620238261819,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"10844rg",{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/format/Grievance-and-Member-Interactions-Tracker/src/index.js",[],["71","72"],"/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/App.js",["73","74","75"],"/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/HomePage.js",["76"],"import { React, useState, useEffect } from \"react\";\nimport GrievanceListContainer from \"./GrievanceListContainer.js\";\nimport GrievanceTableContainer from \"./GrievanceTableContainer\";\nimport GrievanceFormContainer from \"./GrievanceFormContainer\";\n\n\nconst HomePage = ({ history, ...props }) => {\n  const [displayName, setDisplayName] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [meetings, setMeetings] = useState([]);\n  const [listType, setListType] = useState([]);\n  const [listName, setListName] = useState(\"\");\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage, setPostsPerPage] = useState(10);\n\n  //Profile information is brought in from /server/routers/index.js\n\n  useEffect(() => {\n    setLoading(true);\n    loadMeetings();\n    setLoading(false);\n  }, []);\n\n\n\n  //Load all user meetings from the Databas\n  const loadMeetings = async () => {\n    let response = await fetch(\"home/meetings\", {\n      method: \"GET\",\n      credentials: \"same-origin\",\n    });\n\n    let data = await response.json();\n\n\n    //Show the currents user name and display image\n    setDisplayName(\n      data.displayName\n        .toLowerCase()\n        .replace(/(\\w{1})(\\w+)/g, function replacer(match, p1, p2) {\n          return [p1.toUpperCase(), p2, \" \"].join(\"\");\n        })\n    );\n    setImage(data.image);\n\n    setMeetings([...data.userTasks]);\n  };\n\n  const handleMeetingListClick = (e) => {\n    switch (e.target.id) {\n      case \"total\":\n        setListType(meetings);\n        setListName(\"View All\");\n        break;\n      case \"incidentsAndInteractions\":\n        setListType(incidentsAndInteractions);\n        setListName(\"Incidents and Interactions\");\n        break;\n      case \"stepOnes\":\n        setListType(stepOnes);\n        setListName(\"Step 1\");\n        break;\n      case \"stepTwos\":\n        setListType(stepTwos);\n        setListName(\"Step 2\");\n        break;\n      case \"stepTwoToArbitration\":\n        setListType(stepTwoToArbitrations);\n        setListName(\"Step 2 to Arbitration\");\n        break;\n      case \"stepThreeAppeal\":\n        setListType(stepThreeAppeal);\n        setListName(\"Step 3 Appeal\");\n        break;\n      case \"miscellaneous\":\n        setListType(miscellaneous);\n        setListName(\"Miscellaneous\");\n        break;\n    }\n  };\n\n  const handleEventRowClick = (event) => {\n    setSelectedEvent(event);\n  };\n\n\n  let incidentsAndInteractions = meetings.reduce((acc, cur) => {\n    if (\n      cur.meetingType === \"Incidents and Interactions\"\n    ) {\n      acc.push(cur);\n    }\n    return acc;\n  }, []);\n\n  let stepOnes = meetings.reduce((acc, cur) => {\n    if (cur.meetingType === \"Step 1\") {\n      acc.push(cur);\n    }\n    return acc;\n  }, []);\n\n  let stepTwos = meetings.reduce((acc, cur) => {\n    if (cur.meetingType === \"Step 2\") {\n      acc.push(cur);\n    }\n    return acc;\n  }, []);\n\n  let stepTwoToArbitrations = meetings.reduce((acc, cur) => {\n    if (cur.meetingType === \"Step 2 to Arbitration\") {\n      acc.push(cur);\n    }\n    return acc;\n  }, []);\n\n  let stepThreeAppeal = meetings.reduce((acc, cur) => {\n    if (cur.meetingType === \"Step 3 Appeal\") {\n      acc.push(cur);\n    }\n    return acc;\n  }, []);\n\n  let miscellaneous = meetings.reduce((acc, cur) => {\n    if (cur.meetingType === \"Miscellaneous\") {\n      acc.push(cur);\n    }\n    return acc;\n  }, []);\n\n  return (\n    /*This component contains the entire app*/\n    <div className='main-gradient pt-2'>\n      <GrievanceListContainer\n        displayName={displayName}\n        image={image}\n        meetings={meetings}\n        handleMeetingListClick={handleMeetingListClick}\n        incidentsAndInteractions={incidentsAndInteractions}\n        stepOnes={stepOnes}\n        stepTwos={stepTwos}\n        stepTwoToArbitrations={stepTwoToArbitrations}\n        stepThreeAppeal={stepThreeAppeal}\n        miscellaneous={miscellaneous}\n      />\n      <GrievanceTableContainer\n        listType={listType}\n        setListType={setListType}\n        listName={listName}\n        handleEventRowClick={handleEventRowClick}\n        selectedEvent={selectedEvent}\n        loadMeetings={loadMeetings}\n        loading={loading}\n        setLoading={setLoading}\n        setPostsPerPage={setPostsPerPage}\n        postsPerPage={postsPerPage}\n        currentPage={currentPage}\n        setCurrentPage={setCurrentPage}\n      />\n      {selectedEvent ? (\n        <GrievanceFormContainer selectedEvent={selectedEvent} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default HomePage;\n","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/NavigationLogoContainer.js",[],"/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/LogOnForm.js",[],"/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/GrievanceListContainer.js",["77","78","79","80","81","82","83","84","85"],"import React, { useState, useEffect } from \"react\";\nimport NavLogoContainer from \"../components/NavigationLogoContainer\";\nimport NavigationIcons from \"../components/NavigationIcons.js\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst GrievanceListContainer = (props) => {\n  \n  return (\n    <div className='main-gradient h-screen'>\n      <NavLogoContainer />\n      <div className='w-full text-center my-3'>\n        <h3 className='relative text-blue-900 font-bold'>\n          Welcome {props.displayName}\n          {props.image ? (\n            <img\n              className='h-7 w-7 rounded-full absolute right-10 -top-1'\n              src={props.image}\n              alt='User profile from google'\n            />\n          ) : null}\n        </h3>\n      </div>\n      <NavigationIcons />\n      <div className='mx-1 pb-2 mt-5'>\n        <ol className='flex flex-col space-y-2 w-3/4 m-auto'>\n          <li className='justify-procedure-list'>\n            <div className='relative'>\n              <FontAwesomeIcon\n                className='absolute -left-3 top-1'\n                icon={faAngleRight}\n              />\n              <a onClick={props.handleMeetingListClick}>\n                <p className='inline-block' id='total'>\n                  Inbox Total\n                </p>\n              </a>\n            </div>\n            <span className='task-number-icon-blue'>\n              {props.meetings.length}\n            </span>\n          </li>\n          <li className='justify-procedure-list'>\n            <a onClick={props.handleMeetingListClick}>\n              <p className='inline-block' id='incidentsAndInteractions'>\n                Incidents and Interactions\n              </p>\n            </a>\n            <span className='task-number-icon-blue'>\n              {props.incidentsAndInteractions.length}\n            </span>\n          </li>\n          <li className='justify-procedure-list' id='stepOnes'>\n            <a onClick={props.handleMeetingListClick}>\n              <p className='inline-block' id='stepOnes'>\n                Step 1\n              </p>\n            </a>\n            <span className='task-number-icon-blue'>\n              {props.stepOnes.length}\n            </span>\n          </li>\n          <li className='justify-procedure-list'>\n            <a onClick={props.handleMeetingListClick}>\n              <p className='inline-block' id='stepTwos'>\n                Step 2\n              </p>\n            </a>\n            <span className='task-number-icon-blue'>\n              {props.stepTwos.length}\n            </span>\n          </li>\n          <li className='justify-procedure-list'>\n            <a onClick={props.handleMeetingListClick}>\n              <p className='inline-block' id='stepTwoToArbitration'>\n                Step 2 to Arbitration\n              </p>\n            </a>\n            <span className='task-number-icon-blue'>\n              {props.stepTwoToArbitrations.length}\n            </span>\n          </li>\n          <li className='justify-procedure-list'>\n            <a onClick={props.handleMeetingListClick}>\n              <p className='inline-block' id='stepThreeAppeal'>\n                Step 3 Appeal\n              </p>\n            </a>\n            <span className='task-number-icon-blue'>\n              {props.stepThreeAppeal.length}\n            </span>\n          </li>\n          <li className='justify-procedure-list'>\n            <a onClick={props.handleMeetingListClick}>\n              <p className='inline-block' id='miscellaneous'>\n                Miscellaneous\n              </p>\n            </a>\n            <span className='task-number-icon-blue'>\n              {props.miscellaneous.length}\n            </span>\n          </li>\n        </ol>\n        <div className='mt-3 mx-1 pb-2'>\n          <ol className='w-3/4 m-auto'>\n            <div>\n              <input type='checkbox' name='today' className='' />\n              <li className='inline-block ml-2'>Today</li>\n            </div>\n            <div>\n              <input type='checkbox' name='next week' className='' />\n              <li className='inline-block ml-2'>Next 5 days</li>\n            </div>\n            <div>\n              <input type='checkbox' name='next week' className='' />\n              <li className='inline-block ml-2'>Next 14 days</li>\n            </div>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GrievanceListContainer;\n","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/GrievanceFormContainer.js",["86"],"import React, { useState } from \"react\";\nimport MemberInteractionForm from \"../components/MemberInteractionForm\";\nimport GrievanceForm from \"../components/GrievanceForm\";\n\nconst GrievanceFormContainer = ({ selectedEvent }) => {\n  console.log(\"selected event in form\", selectedEvent);\n\n  return (\n    <div className='w-full h-screen'>\n      {selectedEvent.meetingType === \"Incidents and Interactions\" ? (\n        <MemberInteractionForm selectedEvent={selectedEvent} />\n      ) : null}\n      {selectedEvent.meetingType === \"Step 1\" ? (\n        <GrievanceForm selectedEvent={selectedEvent} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default GrievanceFormContainer;\n","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/containers/GrievanceTableContainer.js",["87","88","89","90","91","92"],"import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport Pagination from \"../components/Pagination\";\n\nconst GrievanceTableContainer = (props) => {\n  const [formValues, setFormValues] = useState({});\n  const [showAddNewForm, setShowAddNewForm] = useState(\"hidden\");\n  const [isAddNewClicked, setIsAddNewClicked] = useState(false);\n  const [resJson, setResJson] = useState({\n    eventNameMissing: \"\",\n    meetingTypeMissing: \"\",\n  });\n  const handleIsAddNewClicked = () => {\n    setIsAddNewClicked(true);\n    setShowAddNewForm(\"block\");\n  };\n  const handleIsResetClicked = () => {\n    setIsAddNewClicked(false);\n    setShowAddNewForm(\"hidden\");\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const { meetingType, meetingDate, meetingName } = formValues;\n\n    console.log(meetingType, \"here\");\n    if (meetingName === \"\") {\n      return setResJson({\n        ...resJson,\n        [\"eventNameMissing\"]: \"Please name your Event\",\n      });\n    }\n\n    setResJson({ ...resJson, [\"eventNameMissing\"]: \"\" });\n\n    if (meetingType === \"\") {\n      console.log(resJson, \"here checking meetingType\");\n      return setResJson({\n        ...resJson,\n        [\"meetingTypeMissing\"]: \"Please choose Meeting type\",\n      });\n    }\n\n    const response = await fetch(\"/add/meeting\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        meetingName,\n        meetingDate,\n        meetingType,\n      }),\n    });\n\n    {\n      window.location.reload();\n    }\n  };\n  const handleInputChange = (e) => {\n    const { id, value } = e.target;\n    console.log(id, \": \", value);\n    setFormValues((prev) => ({ ...prev, [id]: value }));\n  };\n\n  //Pagination Code Start\nconst events = props.listType;\nconst indexOfLastPost = props.currentPage * props.postsPerPage;\nconst indexOfFirstPost = indexOfLastPost - props.postsPerPage;\nconst currentPost = events.slice(indexOfFirstPost, indexOfLastPost);\n//Change Page\nconst paginate = (pageNumber) => {\n  props.setCurrentPage(pageNumber);\n}\n\n//Map Event for paginated code\n  const listOfEvents = currentPost.map((event) => {\n\n    function eventDate(date) {\n      let dateRegEx = date\n        .replace(/(T)00:00:00.000Z/g, \"\");\n      \n        let newDate = new Date(dateRegEx)\n        let actualDate =  new Date( newDate.getTime() + newDate.getTimezoneOffset() * 60000\n        );\n        return actualDate.toDateString();\n        \n    }\n\n    return (\n      <div>\n      <li\n        onClick={() => props.handleEventRowClick(event)}\n        key={event._id}\n        className='my-2 w-full'\n      >\n        <label\n          for={event._id}\n          className='relative left-2 text-sm inline-block w-3/5'\n        >\n          <span>\n            <input\n              type='radio'\n              name='event'\n              id={`${event._id}`}\n              value={`${event._id}`}\n              className='mr-3'\n            />\n          </span>\n          {event.meetingName}\n        </label>\n        <label\n          for={event._id}\n          className='text-center text-sm inline-block w-2/5'\n        >\n          {event.actualDateOfEvent\n            ? eventDate(event.actualDateOfEvent)\n            : \"Unknown\"}\n        </label>\n      </li>\n              </div>\n    );\n  });\n\n\n\n  return (\n    <div className='h-screen bg-blue-300'>\n      <div className='flex py-4'>\n        <div className='border-black ml-4'>\n          <button className='mb-2' onClick={handleIsAddNewClicked}>\n            <FontAwesomeIcon className='block relative left-6' icon={faPlus} />\n            <span className='font-bold block'>Add New</span>\n          </button>\n          <form className={`${showAddNewForm}`} onSubmit={handleSubmit}>\n            <div>\n              <p>\n                {resJson.eventNameMissing && (\n                  <p className='font-bold text-red-600 mb-3'>\n                    {resJson.eventNameMissing}\n                  </p>\n                )}\n                {resJson.meetingTypeMissing && (\n                  <p className='font-bold text-red-600 mb-3'>\n                    {resJson.meetingTypeMissing}\n                  </p>\n                )}\n              </p>\n            </div>\n            <div className='text-left'>\n              <label htmlFor='meetingName' className='inline-block'></label>\n              <input\n                type='text'\n                name='meetingName'\n                placeholder='Add Event Name'\n                className='inline-block bg-white mb-2 pl-1 font-bold'\n                onClick=''\n                onChange={handleInputChange}\n                id='meetingName'\n              />\n            </div>\n            <div className='mt-3 flex space-x-3'>\n              <div className='mb-3'>\n                <label\n                  className='text-left block font-bold'\n                  htmlFor='meetingDate'\n                >\n                  Date of Interaction:\n                </label>\n                <input\n                  className='block'\n                  type='date'\n                  name='meetingDate'\n                  id='meetingDate'\n                  onChange={handleInputChange}\n                  value={formValues.meetingDate}\n                />\n              </div>\n            </div>\n            <div className=''>\n              <label\n                className='block text-left font-bold'\n                htmlFor='tasks'\n              ></label>\n              <select\n                className='bg-white'\n                onChange={handleInputChange}\n                name='meetingType'\n                id='meetingType'\n                value={formValues.meetingType}\n              >\n                <option value=''>Event Type?</option>\n                <option value='Incidents and Interactions'>\n                  Incidents and Interactions\n                </option>\n                <option value='Step 1'>Step 1</option>\n                <option value='Step 2'>Step 2</option>\n                <option value='Step 2 to Arbitration'>\n                  Step 2 to Arbitration\n                </option>\n                <option value='Step 3 Appeal'>Step 3 Appeal</option>\n                <option value='Miscellaneous'>Miscellaneous</option>\n              </select>\n              <button\n                className='bg-blue-400 ml-3 px-2 p-1 rounded-lg '\n                type='submit'\n              >\n                Save\n              </button>\n              <button\n                onClick={handleIsResetClicked}\n                type='reset'\n                className='bg-purple-400 rounded-lg p-1 px-2 ml-2'\n              >\n                Reset\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div className='text-md font-bold ml-5 mb-3'>\n        <h3 className='inline-block'>\n          {props.listName ? (\n            <p>{props.listName + \" \"} Events</p>\n          ) : (\n            \"View Meetings\"\n          )}\n        </h3>\n      </div>\n\n      <div>\n        <ol className='w-full' id='checkboxes'>\n          <div className=' w-full flex px-1'>\n            <h6 className='w-3/5 text-center'>Description</h6>\n            <h6 className='w-2/5 text-center'>Date</h6>\n          </div>\n          <div className=''>\n          {listOfEvents}\n          </div>\n        </ol>\n       {currentPost.length > 0 && <Pagination \n              postsPerPage={props.postsPerPage}\n              totalPosts={events.length}\n              paginate={paginate}\n              />}\n      </div>\n    </div>\n  );\n};\n\nexport default GrievanceTableContainer;\n","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/SignUpOverlay.js",["93","94","95","96"],"import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { withRouter } from \"react-router-dom\";\n\nconst SignUpOverlay = ({history ,...props}) => {\n \n  const [formValues, setFormValues] = useState({});\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    console.log(\"got here submit==>>\", formValues);\n\n    const { email, confirmEmail, password, confirmPassword } = formValues;\n\n    if (email !== confirmEmail) {\n      return props.sendParentJson((prev) => ({\n        ...prev,\n        [\"registrationErrors\"]: \"Email fields don't match\",\n      }));\n    }\n\n    if (password !== confirmPassword) {\n      return props.sendParentJson((prev) => ({\n        ...prev,\n        [\"registrationErrors\"]: \"Password fields don't match\",\n      }));\n    }\n\n    if (password.length < 6 || confirmPassword.length < 6) {\n      return props.sendParentJson((prev) => ({\n        ...prev,\n        [\"registrationErrors\"]: \"Password should be longer than 6 characters\",\n      }));\n    }\n\n    const res = await fetch(\"/users/register\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, fullName, password }),\n    });\n    const json = await res.json();\n\n    props.sendParentJson(json);\n    \n    if (json.accessToken) {\n      history.push(\"/home\");\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { id, value } = e.target;\n    setFormValues((prevValues) => ({ ...prevValues, [id]: value }));\n  };\n\n  const {\n    fullName,\n    email,\n    confirmEmail,\n    password,\n    confirmPassword,\n  } = formValues;\n\n\n  return (\n    <div className='bg-black bg-opacity-75 absolute z-10 h-screen w-full top-0 left-0'>\n      <FontAwesomeIcon\n        className='text-2xl text-white absolute right-7 top-3'\n        icon={faTimes}\n        onClick={props.onCloseOverlayClick}\n      />\n      <form\n        className='w-3/4  m-auto relative top-1/2 transform -translate-y-2/4'\n        onSubmit={handleSubmit}\n        method='post'\n      >\n        <h3 className='text-white text-2xl pb-5'>Create your Account</h3>\n\n        {props.parentJson.registrationErrors ? (\n          <h3 className='text-red-900  text-1xl mb-5 w-3/4'>\n            {props.parentJson.registrationErrors}\n          </h3>\n        ) : null}\n        {props.parentJson.registeredUserExist ? (\n          <h3 className='text-red-900  text-1xl mb-5 w-3/4 '>\n            {props.parentJson.registeredUserExist}\n          </h3>\n        ) : null}\n        {props.parentJson.registrationLogInReady ? (\n          <h3 className='text-green-500 text-1xl mb-5 '>\n            {props.parentJson.registrationLogInReady}\n          </h3>\n        ) : null}\n        <div className='mb-9'>\n          <label className='block text-white font-bold' htmlFor='email'>\n            Name(First and Last):\n          </label>\n          <input\n            className='text-black font-medium '\n            type='text'\n            name='fullName'\n            id='fullName'\n            value={fullName || \"\"}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <div className='my-3'>\n          <label className='block text-white font-bold' htmlFor='email'>\n            Email:\n          </label>\n          <input\n            className='text-black font-medium '\n            type='email'\n            name='email'\n            id='email'\n            value={email || \"\"}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <div className='mb-9'>\n          <label className='block text-white font-bold' htmlFor='email2'>\n            Confirm Email:\n          </label>\n          <input\n            className='text-black font-medium '\n            type='email'\n            name='confirmEmail'\n            id='confirmEmail'\n            value={confirmEmail || \"\"}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <div className='mb-3'>\n          <label className='block text-white font-bold' htmlFor='password'>\n            Password:\n          </label>\n          <input\n            className='text-black font-medium '\n            type='password'\n            name='password'\n            id='password'\n            value={password || \"\"}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <div className=''>\n          <label className='block text-white font-bold' htmlFor='password2'>\n            Confirm Password:\n          </label>\n          <input\n            className='text-black font-medium '\n            type='password'\n            name='confirmPassword'\n            id='confirmPassword'\n            value={confirmPassword || \"\"}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <div>\n          <button\n            type='submit'\n            className='border border-solid rounded-md border-black  px-2 py-1 border-opacity-30 my-4 bg-indigo-500 text-white font-bold'\n          >\n            Submit!\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(SignUpOverlay);\n","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/NavigationIcons.js",[],"/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/MemberInteractionForm.js",["97"],"import React, { useState } from \"react\";\nimport AddSubTask from \"./AddSubTask\";\n\nconst MemberInteractionForm = (props) => {\n  let dateRegEx = props.selectedEvent.actualDateOfEvent.replace(\n    /(T)00:00:00.000Z/g, \" \"\n  )\n  .replace(/(\\d{4})-(\\d{2})-(\\d{2})/, function (match, p1,p2,p3) {\n    return [p1,p2,p3].join(\",\")\n  });\n  let dateOfEventProperFormat = (eventDate) => {\n    let date = new Date(eventDate);\n    let formatDate = `${date.getFullYear()}-0${date.getMonth() + 1}-${\n      date.getDate()\n    }`;\n      console.log(dateRegEx)\n      return formatDate;\n    }\n  \n  const { selectedEvent } = props;\n  const [formValues, setFormValues] = useState({});\n  const [resJson, setResJson] = useState({});\n\n  const handleInputChange = (e) => {\n    const { id, value } = e.target;\n    console.log(id, \": \", value);\n    setFormValues((prev) => ({ ...prev, [id]: value }));\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const {\n      meetingName,\n      meetingType,\n      meetingDate,\n      reminder,\n      extension,\n      description,\n    } = formValues;\n    if (!meetingName) {\n      setResJson({ errors: \"Please include a meeting name at the top.\" });\n    }\n    if (!meetingType) {\n      setResJson({ errors: \"Please include a Meeting Type\" });\n    }\n    if (!description) {\n      setResJson({ errors: \"Please include a description\" });\n    }\n\n    const response = await fetch(\"/add/member-interaction\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        meetingName,\n        meetingDate,\n        reminder,\n        description,\n      }),\n    });\n\n    const json = await response.json();\n\n    setResJson(json);\n\n    console.log(json, resJson, \"I submitted\");\n  };\n  return (\n    <div className='main-gradient px-3 pt-5 relative '>\n      <h3 className='font-bold'>Event Type: {selectedEvent.meetingType}</h3>\n      <form\n        action='/add/meeting'\n        onSubmit={handleSubmit}\n        className='text-center'\n        method='post'\n      >\n        <input\n          type='submit'\n          className='text-1xl p-2 absolute right-2 top-1  bg-blue-400 border-2 rounded-lg'\n          value='Save'\n        />\n        {resJson.message && (\n          <h3 className='text-red-900 font-bold text-2xl relative bottom-2 text-center w-3/4 '>\n            {resJson.message}\n          </h3>\n        )}\n\n        <div className='mt-3 flex space-x-3'>\n          <div className='mb-3'>\n            <label\n              className='text-left block font-bold'\n              htmlFor='meetingName'\n            ></label>\n            <input\n              className='block'\n              type='text'\n              name='meetingName'\n              id='meetingName'\n              value={props.selectedEvent.meetingName}\n              onChange={handleInputChange}\n            />\n          </div>\n        </div>\n        <div className='mt-3 flex space-x-3'>\n          <div className='mb-3'>\n            <label className='text-left block font-bold' htmlFor='meetingDate'>\n              Date of Interaction:\n            </label>\n            <input\n              className='block'\n              type='date'\n              name='meetingDate'\n              id='meetingDate'\n              onChange={handleInputChange}\n              value={dateOfEventProperFormat(\n                dateRegEx\n              )}\n            />\n          </div>\n        </div>\n        <div className='flex'>\n          <div className='mb-5'>\n            <label htmlFor='reminder' className='block text-left font-bold'>\n              Reminder:\n            </label>\n            <input\n              type='date'\n              name='reminder'\n              className='w-full bg-white block'\n              id='reminder'\n              onChange={handleInputChange}\n            />\n          </div>\n        </div>\n        <div className='mt-3 '>\n          <label\n            className='block w-full text-left font-bold'\n            htmlFor='description'\n          >\n            Description:\n          </label>\n          <textarea\n            name='description'\n            className='w-full'\n            cols='30'\n            rows='10'\n            id='description'\n            value={props.selectedEvent.description}\n            onChange={handleInputChange}\n          ></textarea>\n        </div>\n      </form>\n      <AddSubTask />\n    </div>\n  );\n};\n\nexport default MemberInteractionForm;\n","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/GrievanceForm.js",["98"],"import React, {useState} from \"react\";\nimport AddSubTask from \"./AddSubTask\";\n\nconst GrievanceForm = (props) => {\n  const { selectedEvent } = props;\nconst [formValues, setFormValues] = useState({});\nconst [resJson, setResJson] = useState({});\n\nconst handleInputChange = (e) => {\n  const { id, value } = e.target;\n  console.log(id, \": \", value);\n  setFormValues((prev) => ({ ...prev, [id]: value }));\n};\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n\n  const {\n    meetingName,\n    meetingType,\n    meetingDate,\n    reminder,\n    extension,\n    description,\n  } = formValues;\n  if (!meetingName) {\n    setResJson({ errors: \"Please include a meeting name at the top.\" });\n  }\n  if (!meetingType) {\n    setResJson({ errors: \"Please include a Meeting Type\" });\n  }\n  if (!description) {\n    setResJson({ errors: \"Please include a description\" });\n  }\n\n  const response = await fetch(\"/add/meeting\", {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      meetingName,\n      meetingType,\n      meetingDate,\n      reminder,\n      extension,\n      description,\n    }),\n  });\n\n  const json = await response.json();\n\n  setResJson(json);\n\n  console.log(json, resJson, \"I submitted\");\n};\n  return (\n    <div className='bg-blue-100 px-3 pt-5 relative '>\n      <form\n        action='/add/meeting'\n        onSubmit={handleSubmit}\n        className='text-center'\n        method='post'\n      >\n        <input\n          type='submit'\n          className='text-1xl p-2 absolute right-0 top-2 bg-blue-400 border-2 rounded-lg'\n          value='Save'\n        />\n        {resJson.message && (\n          <h3 className='text-red-900 font-bold text-2xl relative bottom-2 text-center w-3/4 '>\n            {resJson.message}\n          </h3>\n        )}\n\n        <div className='mt-3 w-full flex space-x-3'>\n          <div className='relative top-6'>\n            <label className='block text-left font-bold' htmlFor='tasks'>\n              Event Type:{\" \"}\n            </label>\n            <select\n              className='bg-white w-full block h-7 '\n              name='meetingType'\n              id='meetingType'\n              onChange={handleInputChange}\n            >\n              <option value=''>Event Type?</option>\n              <option value='Member Interaction'>Member Interaction</option>\n              <option value='Incident'>Incident</option>\n              <option value='Step 1'>Step 1</option>\n              <option value='Step 2'>Step 2</option>\n              <option value='Step 2 to Arbitration'>\n                Step 2 to Arbitration\n              </option>\n              <option value='Step 3 Appeal'>Step 3 Appeal</option>\n              <option value='Miscellaneous'>Miscellaneous</option>\n            </select>\n          </div>\n          <div className=''>\n            <label className='text-left block font-bold' htmlFor='meetingDate'>\n              Actual Date of Meeting:\n            </label>\n            <input\n              className='w-full block'\n              type='date'\n              name='meetingDate'\n              id='meetingDate'\n              onChange={handleInputChange}\n            />\n          </div>\n        </div>\n        <div className='flex mt-3 relative w-full space-x-3'>\n          <div className='relative top-6'>\n            <label htmlFor='reminder' className='block text-left font-bold'>\n              Reminder:\n            </label>\n            <input\n              type='date'\n              name='reminder'\n              className='w-full bg-white block'\n              id='reminder'\n              onChange={handleInputChange}\n            />\n          </div>\n          <div className='text-left'>\n            <label className='block font-bold' htmlFor='extension'>\n              Extension Date:<span className='block'>(If Applicable)</span>\n            </label>\n            <input\n              className='w-full block'\n              type='date'\n              name='extension'\n              id='extension'\n              onChange={handleInputChange}\n            />\n          </div>\n        </div>\n        <div className='mt-3 '>\n          <label\n            className='block w-full text-left font-bold'\n            htmlFor='description'\n          >\n            Description:\n          </label>\n          <textarea\n            name='description'\n            className='w-full'\n            cols='30'\n            rows='10'\n            id='description'\n            onChange={handleInputChange}\n          ></textarea>\n        </div>\n      </form>\n      <AddSubTask />\n    </div>\n  );\n};\n\nexport default GrievanceForm;\n","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/Pagination.js",["99"],"import React from 'react';\n\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n    const pageNumbers = [];\n\n    for(let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n        pageNumbers.push(i);\n        console.log(pageNumbers)\n    }\n\n    return( \n    <nav className=\"w-4/5 m-auto\">\n        <ul className=\"flex\">\n            {pageNumbers.map(number => (\n                <li key={number} className=\"bg-blue-300 border-black border active:bg-purple-400 hover:bg-purple-400\">\n                    <a href=\"#\" onClick={() => paginate(number)} className=\"p-2 text-black\">\n                        {number}\n                    </a>\n                </li>)\n            )}\n        </ul>\n    </nav>\n    )\n}\n\nexport default Pagination;","/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/NavigationSearchBar.js",[],"/home/format/Grievance-and-Member-Interactions-Tracker/src/client/components/AddSubTask.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":4,"column":8,"nodeType":"106","messageId":"107","endLine":4,"endColumn":24},{"ruleId":"108","severity":1,"message":"109","line":20,"column":9,"nodeType":"110","messageId":"111","endLine":20,"endColumn":59,"fix":"112"},{"ruleId":"113","severity":1,"message":"114","line":48,"column":6,"nodeType":"115","endLine":48,"endColumn":8,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":52,"column":5,"nodeType":"119","messageId":"120","endLine":81,"endColumn":6},{"ruleId":"104","severity":1,"message":"121","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"122","line":1,"column":27,"nodeType":"106","messageId":"107","endLine":1,"endColumn":36},{"ruleId":"123","severity":1,"message":"124","line":35,"column":15,"nodeType":"125","endLine":35,"endColumn":57},{"ruleId":"123","severity":1,"message":"124","line":46,"column":13,"nodeType":"125","endLine":46,"endColumn":55},{"ruleId":"123","severity":1,"message":"124","line":56,"column":13,"nodeType":"125","endLine":56,"endColumn":55},{"ruleId":"123","severity":1,"message":"124","line":66,"column":13,"nodeType":"125","endLine":66,"endColumn":55},{"ruleId":"123","severity":1,"message":"124","line":76,"column":13,"nodeType":"125","endLine":76,"endColumn":55},{"ruleId":"123","severity":1,"message":"124","line":86,"column":13,"nodeType":"125","endLine":86,"endColumn":55},{"ruleId":"123","severity":1,"message":"124","line":96,"column":13,"nodeType":"125","endLine":96,"endColumn":55},{"ruleId":"104","severity":1,"message":"121","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"126","line":9,"column":10,"nodeType":"106","messageId":"107","endLine":9,"endColumn":25},{"ruleId":"108","severity":1,"message":"127","line":32,"column":9,"nodeType":"110","messageId":"111","endLine":32,"endColumn":55,"fix":"128"},{"ruleId":"108","severity":1,"message":"127","line":36,"column":30,"nodeType":"110","messageId":"111","endLine":36,"endColumn":54,"fix":"129"},{"ruleId":"108","severity":1,"message":"130","line":42,"column":9,"nodeType":"110","messageId":"111","endLine":42,"endColumn":61,"fix":"131"},{"ruleId":"104","severity":1,"message":"132","line":46,"column":11,"nodeType":"106","messageId":"107","endLine":46,"endColumn":19},{"ruleId":"133","severity":1,"message":"134","line":58,"column":5,"nodeType":"135","messageId":"136","endLine":60,"endColumn":6},{"ruleId":"104","severity":1,"message":"122","line":1,"column":27,"nodeType":"106","messageId":"107","endLine":1,"endColumn":36},{"ruleId":"108","severity":1,"message":"137","line":20,"column":9,"nodeType":"110","messageId":"111","endLine":20,"endColumn":59,"fix":"138"},{"ruleId":"108","severity":1,"message":"137","line":27,"column":9,"nodeType":"110","messageId":"111","endLine":27,"endColumn":62,"fix":"139"},{"ruleId":"108","severity":1,"message":"137","line":34,"column":9,"nodeType":"110","messageId":"111","endLine":34,"endColumn":78,"fix":"140"},{"ruleId":"104","severity":1,"message":"141","line":37,"column":7,"nodeType":"106","messageId":"107","endLine":37,"endColumn":16},{"ruleId":"104","severity":1,"message":"142","line":5,"column":11,"nodeType":"106","messageId":"107","endLine":5,"endColumn":24},{"ruleId":"123","severity":1,"message":"143","line":16,"column":21,"nodeType":"125","endLine":16,"endColumn":93},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'NavLogoContainer' is defined but never used.","Identifier","unusedVar","no-useless-computed-key","Unnecessarily computed property [\"errors\"] found.","Property","unnecessarilyComputedProperty",{"range":"146","text":"147"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleUserAuthorization' and 'resJson.accessToken'. Either include them or remove the dependency array.","ArrayExpression",["148"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useState' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'isAddNewClicked' is assigned a value but never used.","Unnecessarily computed property [\"eventNameMissing\"] found.",{"range":"149","text":"150"},{"range":"151","text":"150"},"Unnecessarily computed property [\"meetingTypeMissing\"] found.",{"range":"152","text":"153"},"'response' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Unnecessarily computed property [\"registrationErrors\"] found.",{"range":"154","text":"155"},{"range":"156","text":"155"},{"range":"157","text":"155"},"'extension' is assigned a value but never used.","'selectedEvent' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",[659,669],"\"errors\"",{"desc":"158","fix":"159"},[1018,1038],"\"eventNameMissing\"",[1112,1132],[1283,1305],"\"meetingTypeMissing\"",[631,653],"\"registrationErrors\"",[813,835],[1019,1041],"Update the dependencies array to be: [handleUserAuthorization, resJson.accessToken]",{"range":"160","text":"161"},[1305,1307],"[handleUserAuthorization, resJson.accessToken]"]